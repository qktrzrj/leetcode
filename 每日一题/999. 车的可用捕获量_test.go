package test17_16

import (
	"fmt"
	"testing"
)

//在一个 8 x 8 的棋盘上，有一个白色车（rook）。也可能有空方块，白色的象（bishop）和黑色的卒（pawn）。它们分别以字符 “R”，“.”，“B” 和 “p” 给出。大写字符表示白棋，小写字符表示黑棋。
//
//车按国际象棋中的规则移动：它选择四个基本方向中的一个（北，东，西和南），然后朝那个方向移动，直到它选择停止、到达棋盘的边缘或移动到同一方格来捕获该方格上颜色相反的卒。另外，车不能与其他友方（白色）象进入同一个方格。
//
//返回车能够在一次移动中捕获到的卒的数量。
//
//
//示例 1：
//
//
//
//输入：[['.','.','.','.','.','.','.','.'],['.','.','.','p','.','.','.','.'],['.','.','.','R','.','.','.','p'],['.','.','.','.','.','.','.','.'],['.','.','.','.','.','.','.','.'],['.','.','.','p','.','.','.','.'],['.','.','.','.','.','.','.','.'],['.','.','.','.','.','.','.','.']]
//输出：3
//解释：
//在本例中，车能够捕获所有的卒。
//示例 2：
//
//
//
//输入：[['.','.','.','.','.','.','.','.'],['.','p','p','p','p','p','.','.'],['.','p','p','B','p','p','.','.'],['.','p','B','R','B','p','.','.'],['.','p','p','B','p','p','.','.'],['.','p','p','p','p','p','.','.'],['.','.','.','.','.','.','.','.'],['.','.','.','.','.','.','.','.']]
//输出：0
//解释：
//象阻止了车捕获任何卒。
//示例 3：
//
//
//
//输入：[['.','.','.','.','.','.','.','.'],['.','.','.','p','.','.','.','.'],['.','.','.','p','.','.','.','.'],['p','p','.','R','.','p','B','.'],['.','.','.','.','.','.','.','.'],['.','.','.','B','.','.','.','.'],['.','.','.','p','.','.','.','.'],['.','.','.','.','.','.','.','.']]
//输出：3
//解释：
//车可以捕获位置 b5，d6 和 f5 的卒。
//
//
//提示：
//
//board.length == board[i].length == 8
//board[i][j] 可以是 'R'，'.'，'B' 或 'p'
//只有一个格子上存在 board[i][j] == 'R'
//
//来源：力扣（LeetCode）
//链接：https://leetcode-cn.com/problems/available-captures-for-rook
//著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
//
// 遍历查找车的位置，以车的位置为基准
// 向上下左右四个方向遍历，直到边缘或碰到其他棋子，
// 若相遇的棋子为黑色卒，则计1
func numRookCaptures(board [][]byte) int {
	N := len(board)
	var dir = [4][2]int{{-1, 0}, {1, 0}, {0, -1}, {0, 1}}
	cal := func(x, y int) int {
		var p int
		for i := 0; i < 4; i++ {
			for j := 1; j < N; j++ {
				dx := x + j*dir[i][0]
				dy := y + j*dir[i][1]
				if dx < 0 || dx >= N || dy < 0 || dy >= N {
					break
				}
				dest := board[dx][dy]
				if dest != '.' {
					if dest == 'p' {
						p++
					}
					break
				}
			}
		}
		return p
	}
	for i := 0; i < N; i++ {
		for j := 0; j < N; j++ {
			if board[i][j] == 'R' {
				return cal(i, j)
			}
		}
	}
	return 0
}

func Test_numRookCaptures(t *testing.T) {
	fmt.Println(numRookCaptures([][]byte{
		{'.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', 'p', '.', '.', '.', '.'},
		{'.', '.', '.', 'R', '.', '.', '.', 'p'},
		{'.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', 'p', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.'},
	}))
}
